#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Mar 20 12:50:43 2024

@author: kokoro
"""

import matplotlib.pyplot as plt
import numpy as np
import warnings
from scipy.signal import find_peaks


def peak(lowlim,upperlim,filename, n):
    data1=[]
#selecting a section of a peak
#importing the data

    limits = [lowlim,upperlim]     
    data = np.loadtxt(filename, dtype=float, delimiter=',',skiprows=1)
#Select the frequecy values between the limits and make a list of those values that meets the condition.
    for i in range(0, len(data)): 
        if limits[0] <= data[i,0] <= limits[1]:
            data1.append(data[i])
            
            #turn the data into an array from a turple
    data2=np.array(data1)
#slice the x and FFT from the array
    x=data2[:,0]
    FFT=data2[:,1]
#nomarlise the Amplitude spectral density
    y=(FFT/max(FFT))  
#set polynomial p(x) of degree n that is a best fit (in a least-squares sense) for the data in y
#calculate the polynomial that fits our data.
    z=np.polyfit(x,y,n) 

#plotting high order polynomials 
    with warnings.catch_warnings():
        warnings.simplefilter('ignore', np.RankWarning)
        p = np.poly1d(z)

#find the maximum and the mnimum value of x to set values for xp and calcuate the values in the polynomial fit    
    xpl=min(data[:,0])
    xph=max(data[:,0])
#setting  the x values for the polynomial y values p
    xp = np.linspace(xpl,xph,1000)
    fit = p(xp)
    # xpmod=[]
    # fitmod =[]
    # for i in range(0, len(data)): 
    #         if limits[0] <= xp[i] <= limits[1]:
    #             xpmod.append(xp[i])
    #             fitmod.append(fit[i])
            
 
#peak pick
#index each peaks calculatedby find_peaks

    id = find_peaks(fit)
    ind = id[0]

    pk_freq = xp[ind]
    pk_amp = fit[ind]

            
#plot
    fig, ax = plt.subplots()
    ax.scatter(pk_freq, pk_amp)
    plt.plot(x, y, 'x')
    plt.plot(xp, fit,'-')
    plt.ylim(0,1.1)
    plt.xlim(limits[0],limits[1])
    plt.xlabel('Frequency /GHz')
    plt.ylabel('Amplitude spectral density/ Arb. unit')


#for i, txt in enumerate(pk_freq):
    for i in range(len(pk_freq)):    
        if pk_freq[i]<=(limits[1]-5):
            ax.annotate(i+1,(pk_freq[i], pk_amp[i]+0.01),xytext=(pk_freq[i]-1,pk_amp[i]+ 0.18+0.002*i**2),va='top',
            arrowprops=dict(arrowstyle="-", facecolor='black'))

    plt.show()
    index=[]
    pk_frq_l=[]
    for i, txt in enumerate(pk_freq):
        index.append(i+1)
        pk_frq_l.append(pk_freq[i])
        pk_list_T=np.array([index, pk_frq_l])
        pk_list=np.transpose(pk_list_T)
    
    print('File names:',filename,
          'The set values for the analysis are following;',
          'The frequency range is',limits,' degree of polynomial is',n, 
          'The equation of the fit is ',p,
          'Within the limits the peak frequency is',pk_list,'GHz')
    return xp, fit, x,y,p,limits,pk_list

def trial_p(filename, n):
    data = np.loadtxt(filename, dtype=float, delimiter=',',skiprows=1)
    x=data[:,0]
    FFT=data[:,1]
    #nomarlise the Amplitude spectral density
    y=(FFT/max(FFT))  
  
    z=np.polyfit(x,y,n) 

    #plotting high order polynomials 
    with warnings.catch_warnings():
        warnings.simplefilter('ignore', np.RankWarning)
        p = np.poly1d(z)

    #find the maximum and the mnimum value of x to set values for xp and calcuate the values in the polynomial fit    
    xpl=min(x)
    xph=max(x)
    #setting  the x values for the polynomial y values p
    xp = np.linspace(xpl,xph,100000)
    fit = p(xp)
    
    plt.plot(x,y,'x')
    plt.plot(xp,fit,'-')
    plt.xlabel('Frequency /GHz')
    plt.ylabel('Amplitude spectral density/ Arb. unit')
    plt.title('trial')
    plt.ylim(-0.1,1.1)
    

    
    
# def nofit(llimit,ulimit,filename):
#     data = np.loadtxt(filename, dtype=float, delimiter=',',skiprows=1)
#     x=data[:,0]
#     FFT=data[:,1]
#     #nomarlise the Amplitude spectral density
#     y=(FFT/max(FFT))  
#     limits=[llimit,ulimit]
#     id = find_peaks(y)
#     ind = id[0]

#     pk_freq = x[ind]
#     pk_amp = y[ind]

            
# #plot
#     fig, ax = plt.subplots()
#     ax.scatter(pk_freq, pk_amp)
#     plt.plot(x, y, 'x')
#     plt.ylim(0,1.1)
#     plt.xlim(limits[0],limits[1])
#     plt.xlabel('Frequency /GHz')
#     plt.ylabel('Amplitude spectral density/ Arb. unit')


# #for i, txt in enumerate(pk_freq):
#     for i in range(len(pk_freq)):    
#         if pk_freq[i]<=(limits[1]-5):
#             ax.annotate(i+1,(pk_freq[i], pk_amp[i]+0.01),xytext=(pk_freq[i]-1,pk_amp[i]+ 0.18+0.002*i),va='top',
#             arrowprops=dict(arrowstyle="-", facecolor='black'))

#     plt.show()
#     index=[]
#     pk_frq_l=[]
#     for i, txt in enumerate(pk_freq):
#         index.append(i+1)
#         pk_frq_l.append(pk_freq[i])
#         pk_list_T=np.array([index, pk_frq_l])
#         pk_list=np.transpose(pk_list_T)
    


    
#     plt.plot(x,y,'-')
#     plt.xlabel('Frequency /GHz')
#     plt.ylabel('Amplitude spectral density/ Arb. unit')
#     plt.title('No fit')
#     plt.ylim(-0.1,1.1)
    
def hi():
    print ('hi')
    
#Offset comaprison polarised
#Analysed - 20240307 Brilliant yellow 02 - FFT2 240312 1400.csv
#Analysed - 20240307 Brilliant yellow 03 - FFT1 240312 1136.csv
#Analysed - 20240308 Brilliant yellow 06 - FFT 240314 1226


#Offset comaprison non polarised
#Analysed - 20240307 Brilliant yellow 06 - FFT1 240312 1542.csv
#Analysed - 20240307 Brilliant yellow 07 - FFT1 240312 1608.csv
#Analysed - 20240308 Brilliant yellow 01 - FFT1 240314 1106.csv
#Analysed - 20240308 Brilliant yellow 02 - FFT1 240314 1132


#%%

filename2_7=input('What is the file name2?')
f


#trial=trial_p(filename3,141)
#nofit1=nofit(7,143,filename)
#%%
data_7 = peak(13,155,filename,141)
# data_6 = peak(,,filename3,)
# data_1 = peak()
# data_2= peak()
# data_3= peak()


#%%
np.savetxt('0370_7_FFT1_xp13_155w',data_w[0])
np.savetxt('0370_7_FFT1_fit13_155w',data_w[1])
np.savetxt('0370_7_FFT1_x13_155w',data_w[2])
np.savetxt('0370_7_FFT1_y13_155w',data_w[3])
np.savetxt('0370_7_FFT1_p13_155w',data_w[4])
#%%
#data_w = peak(7,143,filename,130)
# #%%
# #data_560 = peak(5,60,'Analysed - 20240307 Brilliant yellow 02 - FFT2 240312 1400 copy.csv',130)
# #data_50150 = peak(56,150,'Analysed - 20240307 Brilliant yellow 02 - FFT2 240312 1400 copy.csv',130)
# from numpy import linalg
# g=[]

# for i in range (143,500,1):  
#     try:
#         data_w = peak(7,143,filename,i)
#         g.append(i)
#         return 'try'
        

    
 
   
#%%
np.savetxt('0370_2_FFT3_xp9_143w',data_w[0])
np.savetxt('0370_2_FFT3_fit9_143w',data_w[1])
np.savetxt('0370_2_FFT3_x9_143w',data_w[2])
np.savetxt('0370_2_FFT3_y9_143w',data_w[3])
np.savetxt('0370_2_FFT3_p9_143w',data_w[4])
#%%
# filename ='Analysed - 20240307 Brilliant yellow 02 - FFT3 240312 1413.csv'
# data = np.loadtxt(filename, dtype=float, delimiter=',',skiprows=1)
# x=data[:,0]
# FFT=data[:,1]
# #nomarlise the Amplitude spectral density
# y=(FFT/max(FFT))  
# n=130
# z=np.polyfit(x,y,n) 

# #plotting high order polynomials 
# with warnings.catch_warnings():
#     warnings.simplefilter('ignore', np.RankWarning)
#     p = np.poly1d(z)

# #find the maximum and the mnimum value of x to set values for xp and calcuate the values in the polynomial fit    
# xpl=min(x)
# xph=max(x)
# #setting  the x values for the polynomial y values p
# xp = np.linspace(xpl,xph,1000)
# fit = p(xp)
# plt.plot(x,y,'x')
# plt.plot(xp,fit,'-')

# plt.xlabel('Frequency /GHz')
# plt.ylabel('Amplitude spectral density/ Arb. unit')

#%%
# np.savetxt('0370_2_FFT2_xp560',data_560[0])
# np.savetxt('0370_2_FFT2_fit560',data_560[1])
# np.savetxt('0370_2_FFT2_x560',data_560[2])
# np.savetxt('0370_2_FFT2_y560',data_560[3])
# np.savetxt('0370_2_FFT2_p560',data_560[4])
# np.savetxt('0370_2_FFT2_limits',data_560[5])
# np.savetxt('0370_2_FFT2_xp50150',data_50150[0])
# np.savetxt('0370_2_FFT2_fit50150',data_50150[1])
# np.savetxt('0370_2_FFT2_x50150',data_50150[2])
# np.savetxt('0370_2_FFT2_y50150',data_50150[3])
# np.savetxt('0370_2_FFT2_p50150',data_50150[4])
#%%


